name: Combined

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Runs on a schedule (every 40 minutes)
  schedule:
    - cron: '*/40 * * * *'

jobs:
  update-playlist:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
    env:
      HOME: /root # Set HOME to /root for consistent path handling
      # --- CLOUDFLARE WORKER CONFIGURATION ---
      CLOUDFLARE_WORKER_DOMAIN: "https://mychannels.kipkoechvictor3.workers.dev"
      CLW_TARGET_DOMAINS: |
        gg.poocloud.in/
        sundaytueday.store/
        cdn.welovestroll.store/
        jdx3.org/
        embedsports.top/
      EPG_URL: "https://raw.githubusercontent.com/KipkoechVictor3/MyEPG/main/combined_epg.xml.gz"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies and set up Python virtual environment
        run: |
          apt-get update
          apt-get install -y python3-venv
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install playwright==1.55.0 aiohttp dropbox httpx requests
        shell: bash

      - name: Download scripts and clean line endings
        run: |
          # Downloading existing scripts
          # curl -L -o FSC.py "https://tinyurl.com/m4evvh4v" # COMMENTED OUT: Now run in FSC_Only.yaml
          curl -L -o FS.py "https://tinyurl.com/mv5ew6m5"
          curl -L -o PP.py "https://tinyurl.com/muuurv94"
          curl -L -o TML.py "https://tinyurl.com/mrmtxffk"
          curl -L -o WC.py "https://tinyurl.com/35jt8wtm"
          curl -L -o ACEE.py "https://tinyurl.com/45yxvmmn"
          curl -L -o FILTER.py "https://tinyurl.com/8x4hkrvy"
          # Using the modified PPL_SCRIPT.py
          curl -L -o PPL_SCRIPT.py "https://tinyurl.com/muuurv94"
          # Download channels list
          curl -L -o channels.txt "https://tinyurl.com/4ze5nm6p"

          # Clean line endings for channels.txt (important for Unix environments)
          if [ -f "channels.txt" ]; then
            mv channels.txt channels.txt.tmp
            tr -d '\r' < channels.txt.tmp > channels.txt
            rm channels.txt.tmp
            echo "‚úÖ Cleaned channels.txt for invisible line-ending characters."
          fi
        shell: bash

      - name: Download remote pl
        run: |
          echo "Starting download of remote playlists from channels.txt..."
          if [ -f "channels.txt" ]; then
            line_number=0
            while read -r url; do
              line_number=$((line_number + 1))
              if [[ ! -z "$url" && ! "$url" =~ ^# ]]; then
                temp_file="remote_playlist_${line_number}.m3u"
                echo "Downloading line ${line_number}: $url to $temp_file"
                if curl -L -f --connect-timeout 15 "$url" -o "$temp_file"; then
                  echo "‚úÖ Successfully downloaded: $url"
                else
                  echo "‚ùå Failed to download: $url"
                  echo "#EXTM3U" > "$temp_file"
                  echo "#ERROR_DOWNLOAD_FAILED $url" >> "$temp_file"
                fi
              fi
            done < "channels.txt"
          else
            echo "‚ö†Ô∏è channels.txt not found, skipping remote playlist download."
          fi
        shell: bash

      - name: Download Remote FSC.m3u with Backup Links
        run: |
          FSC_MAIN_URL="https://bit.ly/FSCm3u"
          FSC_BACKUP_URL="https://bit.ly/3Wmleuo"
          OUTPUT_FILE="remote_FSC.m3u"
          
          echo "Attempting to download FSC.m3u from main link..."
          if curl -L -f --connect-timeout 15 "$FSC_MAIN_URL" -o "$OUTPUT_FILE"; then
              echo "‚úÖ Successfully downloaded FSC.m3u from main link."
          else
              echo "‚ùå Main link failed. Attempting backup link..."
              if curl -L -f --connect-timeout 15 "$FSC_BACKUP_URL" -o "$OUTPUT_FILE"; then
                  echo "‚úÖ Successfully downloaded FSC.m3u from backup link."
              else
                  echo "‚ùå Both FSC links failed. Creating empty placeholder file."
                  echo "#EXTM3U" > "$OUTPUT_FILE"
                  echo "#ERROR_FSC_DOWNLOAD_FAILED" >> "$OUTPUT_FILE"
              fi
          fi
        shell: bash
        
      - name: Run Python scripts and Measure Time ‚è±Ô∏è
        run: |
          source venv/bin/activate
          
          echo "#EXTM3U url-tvg=\"${EPG_URL}\"" > MyStuff.m3u
          
          declare -A script_outputs
          script_outputs=(
            # ["FSC.py"]="S1.m3u" # COMMENTED OUT: Now downloaded remotely
            ["FS.py"]="S2.m3u8"
            ["PPL_SCRIPT.py"]="S3.m3u"
            ["TML.py"]="S4.m3u8"
            ["WC.py"]="S5.m3u8"
            ["ACEE.py"]="ACEE.m3u8"
            ["FILTER.py"]="S_FILTER.m3u"
          )
          
          TOTAL_SCRIPTS=${#script_outputs[@]}
          SCRIPTS_COMPLETED=0
          
          echo "--- Combining content from Python scripts ---"
          for script in "${!script_outputs[@]}"; do
            SCRIPTS_COMPLETED=$((SCRIPTS_COMPLETED + 1))
            
            echo -e "\n\n\033[1;44m --- SCRIPT PROGRESS: ${SCRIPTS_COMPLETED} of ${TOTAL_SCRIPTS} --- \033[0m"
            
            START_TIME=$(date +%s)
            
            echo "::group::‚ñ∂Ô∏è Running $script..."
            python "$script" || echo "‚ö†Ô∏è $script failed but continuing with the next script..."
            echo "::endgroup::"
            
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            
            echo "::notice title=Script Time Complete::**‚úÖ $script FINISHED!** Time Taken: **${DURATION} seconds**"
            
            output_file="${script_outputs[$script]}"
            
            if [ -s "$output_file" ]; then
              echo "üìÑ Appending from $output_file to MyStuff.m3u"
              
              for i in {1..10}; do echo >> MyStuff.m3u; done
              grep -v '^#EXTM3U' "$output_file" >> MyStuff.m3u
              
              rm -f "$output_file"
            else
              echo "‚ö†Ô∏è $output_file is still empty, skipping append."
            fi
          done

          echo "--- Appending pre-downloaded remote playlists ---"
          
          # 1. Append the pre-downloaded FSC.m3u content
          FSC_FILE="remote_FSC.m3u"
          if [ -s "$FSC_FILE" ] && ! grep -q "#ERROR_FSC_DOWNLOAD_FAILED" "$FSC_FILE"; then
              echo "üìÑ Appending content from remote FSC.m3u"
              for i in {1..10}; do echo >> MyStuff.m3u; done
              grep -v '^#EXTM3U' "$FSC_FILE" >> MyStuff.m3u
              rm -f "$FSC_FILE"
          else
              echo "‚ö†Ô∏è FSC.m3u download failed or was empty, skipping append."
              rm -f "$FSC_FILE"
          fi
          
          # 2. Append all other remote playlists
          downloaded_files=$(find . -maxdepth 1 -type f -name 'remote_playlist_*.m3u' | sort -V)
          if [ -n "$downloaded_files" ]; then
            for temp_file in $downloaded_files; do
              if grep -q "#ERROR_DOWNLOAD_FAILED" "$temp_file"; then
                echo "‚ö†Ô∏è Skipping failed download: $(basename "$temp_file")"
              else
                echo "üìÑ Appending from $(basename "$temp_file") to MyStuff.m3u"

                for i in {1..10}; do echo >> MyStuff.m3u; done
                grep -v '^#EXTM3U' "$temp_file" >> MyStuff.m3u
              fi
              rm -f "$temp_file"
            done
          else
            echo "‚ö†Ô∏è No remote playlist files found to append."
          fi
        shell: bash

      - name: Process and Create CLW
        run: |
          echo "Starting creation and processing of MyStuffCLW.m3u..."
          cp MyStuff.m3u MyStuffCLW.m3u
          
          readarray -t TARGET_LIST <<< "$CLW_TARGET_DOMAINS"
          
          CLW_URL="${CLOUDFLARE_WORKER_DOMAIN}"
          CLW_URL=$(echo "$CLW_URL" | sed 's/\/$//')
          
          echo "a) Removing all #EXTVLCOPT headers from MyStuffCLW.m3u"
          sed -i.bak -E '/^#EXTVLCOPT/d' MyStuffCLW.m3u
          rm -f MyStuffCLW.m3u.bak
          
          echo "b) Starting URL Prefixing..."
          for TARGET in "${TARGET_LIST[@]}"; do
              TARGET=$(echo "$TARGET" | xargs)
              if [[ -n "$TARGET" ]]; then
                  echo "¬† ¬† -> Prefixing URLs matching: ${TARGET}"
                  SAFE_TARGET=$(echo "${TARGET}" | sed 's/[\/.]/\\&/g')
                  sed -i.bak -E "/^http.*${SAFE_TARGET}/s|^|${CLW_URL}/|" MyStuffCLW.m3u
                  rm -f MyStuffCLW.m3u.bak
              fi
          done
          
          echo "‚úÖ MyStuffCLW.m3u successfully created with CLW prefix and headers removed."
        shell: bash

      - name: Formatting
        run: |
          echo "Fixing Title/URL concatenation issue by aggressively cleaning line breaks..."
          tr -d '\r' < MyStuffCLW.m3u > MyStuffCLW_TEMP1.m3u
          sed -E 's/[[:space:]]+$//' MyStuffCLW_TEMP1.m3u > MyStuffCLW_TEMP2.m3u
          grep -v '^$' MyStuffCLW_TEMP2.m3u > MyStuffCLW.m3u
          # CORRECTED TYPO: .m32 changed to .m3u
          rm -f MyStuffCLW_TEMP1.m3u MyStuffCLW_TEMP2.m3u
          echo "‚úÖ Title/URL concatenation issue addressed in MyStuffCLW.m3u."
        shell: bash

      - name: Upload original
        uses: gomes042/gh-actions-dropbox/files/upload@23ce81287e83f01c19c9f60b1849b746db6616b5
        with:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          source_path: MyStuff.m3u
          DEST_PATH: /MyStuff/MyStuff.m3u

      - name: Upload Changed
        uses: gomes042/gh-actions-dropbox/files/upload@23ce81287e83f01c19c9f60b1849b746db6616b5
        with:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          source_path: MyStuffCLW.m3u
          DEST_PATH: /MyStuff/MyStuffCLW.m3u
