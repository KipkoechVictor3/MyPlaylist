name: Acestream Proxy Playlist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours

jobs:
  run-proxy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar jq curl libpython3.10-dev python3-pip build-essential libsodium-dev python3-nacl python3-apsw python3-crypto
          pip3 install aiohttp aiosignal async-timeout attrs certifi chardet charset-normalizer click dnspython expiringdict frozenlist html5lib idna lxml MarkupSafe multidict pycountry pycurl psutil requests six soupsieve versioningit yarl




      - name: Download AceStream tarball
        run: |
          wget https://download.acestream.media/linux/acestream_3.2.3_ubuntu_22.04_x86_64_py3.10.tar.gz -O acestream.tar.gz
          mkdir -p acestream
          tar -xzf acestream.tar.gz -C acestream

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: Start AceStream + ngrok
        run: |
          # find the AceStream engine binary by name
          ENGINE_PATH=$(find acestream -type f -name "acestreamengine" | head -n1)
          echo "Using AceStream launcher: $ENGINE_PATH"

          if [ -z "$ENGINE_PATH" ]; then
            echo "Error: AceStream engine not found!"
            exit 1
          fi

          mkdir -p /tmp/acestream-profile
          chmod +x "$ENGINE_PATH"

          ngrok authtoken ${{ secrets.NGROK_AUTH }}
          nohup "$ENGINE_PATH" --bind-port=6878 --player-id=ghactions --data-dir=/tmp/acestream-profile >engine.log 2>&1 &

          # Wait for AceStream to start and listen on port 6878
          echo "Waiting for AceStream to start listening on port 6878..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check for a TCP listener on port 6878
            if ss -tln | grep -q ':6878'; then
              echo "AceStream is listening on port 6878. Proceeding."
              break
            else
              echo "Port 6878 not open, retrying... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: AceStream failed to start after multiple retries. Check engine.log."
              cat engine.log
              exit 1
            fi
          done
          
          nohup ngrok tcp 6878 >ngrok.log 2>&1 &
          
          # Wait for the ngrok API to be available and get the tunnel URL
          echo "Waiting for ngrok tunnel to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            TUNNELS=$(curl -s http://127.0.0.1:4040/api/tunnels)
            if echo "$TUNNELS" | jq -e '.tunnels | length > 0' >/dev/null; then
              echo "ngrok tunnel is ready."
              echo "$TUNNELS" | jq . > tunnels.json
              break
            else
              echo "ngrok API not ready, retrying... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done

          # Check if tunnels.json was created successfully
          if [ ! -s tunnels.json ]; then
            echo "Error: Failed to get ngrok tunnel information after multiple retries."
            echo "--- ngrok.log ---"
            cat ngrok.log
            echo "--- end of ngrok.log ---"
            exit 1
          fi

          cat tunnels.json

      - name: Generate Playlist
        env:
          ACESTREAMS: ${{ secrets.ACESTREAMS }}
        run: |
          HOST=$(jq -r '.tunnels[0].public_url' tunnels.json | sed 's|tcp://||')
          IP=$(echo $HOST | cut -d: -f1)
          PORT=$(echo $HOST | cut -d: -f2)

          mkdir -p output
          {
            echo '#EXTM3U url-tvg="https://raw.githubusercontent.com/pigzillaaaaa/iptv-scraper/refs/heads/main/epgs/daddylive-channels-epg.xml"'
            echo
            echo "$ACESTREAMS" | sed "s|127.0.0.1:6878|$IP:$PORT|g"
          } > output/Acestreams.m3u

          echo "Generated playlist:"
          cat output/Acestreams.m3u

      - name: Upload playlist artifact
        uses: actions/upload-artifact@v4
        with:
          name: acestream-playlist
          path: output/Acestreams.m3u

      - name: Upload Acestream playlist to Dropbox
        uses: gomes042/gh-actions-dropbox/files/upload@23ce81287e83f01c19c9f60b1849b746db6616b5
        with:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          source_path: output/Acestreams.m3u
          DEST_PATH: /Acestreams/Acestreams.m3u
