name: Acestream Proxy Playlist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours

jobs:
  run-proxy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start AceStream with Docker
        run: |
          docker run -d --name acestream-server -p 6878:6878 magnetikonline/acestream-server:3.1.49_debian_8.11
          echo "AceStream container started."
          sleep 30

      - name: Install ngrok
        run: |
          # Download the ngrok binary for Linux
          wget https://bin.equinox.io/c/4VmD1QD5w/ngrok-stable-linux-amd64.tgz -O ngrok.tgz
          
          # Extract the binary
          tar -xvzf ngrok.tgz
          
          # Move it to a directory in your PATH, making it globally accessible
          sudo mv ngrok /usr/local/bin/ngrok
          
          echo "ngrok is now installed in /usr/local/bin/"

      - name: Start ngrok tunnel
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH }}
          nohup ngrok tcp 6878 >ngrok.log 2>&1 &
          
          # Wait for the ngrok API to be available and get the tunnel URL
          echo "Waiting for ngrok tunnel to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            TUNNELS=$(curl -s http://127.0.0.1:4040/api/tunnels)
            if echo "$TUNNELS" | jq -e '.tunnels | length > 0' >/dev/null; then
              echo "ngrok tunnel is ready."
              echo "$TUNNELS" | jq . > tunnels.json
              break
            else
              echo "ngrok API not ready, retrying... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done

          if [ ! -s tunnels.json ]; then
            echo "Error: Failed to get ngrok tunnel information after multiple retries."
            echo "--- ngrok.log ---"
            cat ngrok.log
            echo "--- end of ngrok.log ---"
            exit 1
          fi

          cat tunnels.json

      - name: Generate Playlist
        env:
          ACESTREAMS: ${{ secrets.ACESTREAMS }}
        run: |
          HOST=$(jq -r '.tunnels[0].public_url' tunnels.json | sed 's|tcp://||')
          IP=$(echo $HOST | cut -d: -f1)
          PORT=$(echo $HOST | cut -d: -f2)

          mkdir -p output
          {
            echo '#EXTM3U url-tvg="https://raw.githubusercontent.com/pigzillaaaaa/iptv-scraper/refs/heads/main/epgs/daddylive-channels-epg.xml"'
            echo
            echo "$ACESTREAMS" | sed "s|127.0.0.1:6878|$IP:$PORT|g"
          } > output/Acestreams.m3u

          echo "Generated playlist:"
          cat output/Acestreams.m3u

      - name: Upload playlist artifact
        uses: actions/upload-artifact@v4
        with:
          name: acestream-playlist
          path: output/Acestreams.m3u

      - name: Upload Acestream playlist to Dropbox
        uses: gomes042/gh-actions-dropbox/files/upload@23ce81287e83f01c19c9f60b1849b746db6616b5
        with:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          source_path: output/Acestreams.m3u
          DEST_PATH: /Acestreams/Acestreams.m3u
  
