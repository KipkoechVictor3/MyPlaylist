name: Run FST Scraper (standalone)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"   # every 2 hours

jobs:
  run-fst:
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache pip wheels (stable key so cache can be used without requirements file)
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # fixed key so cache persists until you change version strings below
          key: pip-${{ runner.os }}-playwright1.55.0-aiohttp3.12.15-dropbox12.0.2
          restore-keys: |
            pip-${{ runner.os }}-

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-1.55.0
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Only installs on cache miss; keeps installs off on subsequent runs
      - name: Install dependencies & browsers (runs only on cache miss)
        run: |
          python -m pip install --upgrade pip
          pip install playwright==1.55.0 aiohttp dropbox
          # Ensure Playwright's Python knows about the browser (only does network download if cache miss)
          playwright install --with-deps firefox

      # Restore the script from secret into FST_SCRIPT.py
      - name: Restore FST script from secret
        env:
          FST_SCRIPT: ${{ secrets.FST_SCRIPT }}
        run: |
          echo "$FST_SCRIPT" > FST_SCRIPT.py
          chmod +x FST_SCRIPT.py
          echo "Wrote FST_SCRIPT.py"

      # Run the script. Provide URL either via secret FST_URL (recommended) or via workflow input
      - name: Run FST script
        id: run_fst
        env:
          FST_URL: ${{ secrets.FST_URL }}   # set this secret to your target homepage
        run: |
          if [ -n "${FST_URL}" ]; then
            echo "Running with FST_URL from secret"
            python FST_SCRIPT.py "$FST_URL"
          else
            echo "No FST_URL secret provided â€” expecting URL as workflow input or embedded in the script"
            python FST_SCRIPT.py
          fi

      # Check whether the playlist was created and set an output
      - name: Check for output
        id: check_output
        run: |
          if [ -f "FST.m3u8" ]; then
            echo "playlist_generated=true" >> $GITHUB_OUTPUT
            echo "Found FST.m3u8"
          else
            echo "playlist_generated=false" >> $GITHUB_OUTPUT
            echo "No FST.m3u8 found"
          fi

      # Upload to Dropbox if playlist exists
      - name: Upload FST.m3u8 to Dropbox
        if: steps.check_output.outputs.playlist_generated == 'true'
        uses: gomes042/gh-actions-dropbox/files/upload@23ce81287e83f01c19c9f60b1849b746db6616b5
        with:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          source_path: FST.m3u8
          DEST_PATH: /MyStuff/FST.m3u8
